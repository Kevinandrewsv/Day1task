1. Write a blog on Difference between HTTP1.1 vs HTTP2:

HTTP stands for Hypertext Transfer Protocol. It is an application protocol used for transmitting data over the internet. 
HTTP is the foundation of data communication for the World Wide Web, and it defines how web browsers and servers communicate with each other.
When a user enters a URL (Uniform Resource Locator) into their web browser, the browser sends an HTTP request to the web server hosting the website. The server then responds with an HTTP response, which includes the data requested by the browser, such as the HTML, CSS, JavaScript, and media files needed to display the web page.
HTTP is a stateless protocol, which means that each request from the browser to the server is independent and does not maintain any information about previous requests. To maintain stateful communication, web developers can use cookies or other mechanisms to store and retrieve information about the user and their interactions with the website.
The current version of HTTP is HTTP/2, which was released in 2015 and provides significant improvements over its predecessor, HTTP/1.1. HTTP/2 offers faster page loading times, improved security, and better resource utilization. It achieves this through features such as multiplexing, header compression, server push, and prioritization.
HTTP, or Hypertext Transfer Protocol, is a set of rules that govern how web servers and web browsers communicate with each other. It is the foundation of the World Wide Web. HTTP/1.1 has been the standard protocol for web communication for over 20 years, but recently HTTP/2 has been introduced as an upgrade. In this blog post, we will discuss the differences between HTTP/1.1 and HTTP/2.

Binary vs Text Protocol
HTTP/1.1 is a text-based protocol, which means that the request and response messages are in plain text. 
However, HTTP/2 is a binary protocol, which means that the messages are in binary format. 
This means that HTTP/2 is more efficient at transferring data than HTTP/1.1.

Multiplexing
HTTP/1.1 only allows one request to be sent over a single connection at a time. 
This means that if a web page has multiple resources, such as images and scripts, the browser has to send multiple requests to the server, resulting in slower page load times. On the other hand, HTTP/2 supports multiplexing, which means that multiple requests can be sent over a single connection at the same time. 
This results in faster page load times.

Server Push
HTTP/2 also introduces server push, which allows the server to send resources to the client without the client requesting them. 
For example, if the server knows that the client will need a specific resource, such as an image, it can push that resource to the client before the client requests it. 
This can further reduce page load times.

Header Compression
HTTP/1.1 headers are sent with every request and response, which can result in a significant amount of data being sent over the network. 
HTTP/2 introduces header compression, which reduces the size of the headers, resulting in faster page load times.

Security
HTTP/1.1 does not have any built-in security features. 
However, HTTPS can be used to provide security. On the other hand, HTTP/2 requires the use of HTTPS, which means that all communication between the server and the client is encrypted, providing better security.

In conclusion, HTTP/2 is a significant upgrade over HTTP/1.1. It is more efficient, faster, and more secure. However, not all web servers and browsers support HTTP/2 yet, so it may take some time before it becomes the standard protocol for web communication

2. Write a blog about objects and its internal representation in Javascript


Objects, in JavaScript, is it’s most important data-type and forms the building blocks for modern JavaScript. These objects are quite different from JavaScript’s primitive data-types(Number, String, Boolean, null, undefined and symbol) in the sense that while these primitive data-types all store a single value each (depending on their types).

Objects are more complex and each object may contain any combination of these primitive data-types as well as reference data-types.
An object, is a reference data type. Variables that are assigned a reference value are given a reference or a pointer to that value. That reference or pointer points to the location in memory where the object is stored. The variables don’t actually store the value.

Loosely speaking, objects in JavaScript may be defined as an unordered collection of related data, of primitive or reference types, in the form of “key: value” pairs. These keys can be variables or functions and are called properties and methods, respectively, in the context of an object.

For Eg. If your object is a student, it will have properties like name, age, address, id, etc and methods like updateAddress, updateNam, etc.
Objects and properties

A JavaScript object has properties associated with it. A property of an object can be explained as a variable that is attached to the object. Object properties are basically the same as ordinary JavaScript variables, except for the attachment to objects. The properties of an object define the characteristics of the object. You access the properties of an object with a simple dot-notation:

objectName.propertyName

Like all JavaScript variables, both the object name (which could be a normal variable) and property name are case sensitive. You can define a property by assigning it a value. For example, let’s create an object named myCar and give it properties named make, model, and year as follows:

var myCar = new Object();
myCar.make = 'Hyundai’';
myCar.model = 'venue';
myCar.year = 2010;

Unassigned properties of an object are undefined (and not null).

myCar.color; // undefined

Properties of JavaScript objects can also be accessed or set using a bracket notation (for more details see property accessors). Objects are sometimes called associative arrays, since each property is associated with a string value that can be used to access it. So, for example, you could access the properties of the myCar object as follows:

myCar['make'] = 'Hyundai’';
myCar['model'] = 'venue';
myCar['year'] = 2010;

An object property name can be any valid JavaScript string, or anything that can be converted to a string, including the empty string. However, any property name that is not a valid JavaScript identifier (for example, a property name that has a space or a hyphen, or that starts with a number) can only be accessed using the square bracket notation. This notation is also very useful when property names are to be dynamically determined (when the property name is not determined until runtime). Examples are as follows:

// four variables are created and assigned in a single go, 
// separated by commas
var myObj = new Object(),
    str = 'myString',
    rand = Math.random(),
    obj = new Object();
myObj.type              = 'Dot syntax';
myObj['date created']   = 'String with space';
myObj[str]              = 'String value';
myObj[rand]             = 'Random Number';
myObj[obj]              = 'Object';
myObj['']               = 'Even an empty string';console.log(myObj);

You can also access properties by using a string value that is stored in a variable:

var propertyName = 'make';
myCar[propertyName] = 'Hyundai’';propertyName = 'model';
myCar[propertyName] = 'venue';

You can use the bracket notation with for...in to iterate over all the enumerable properties of an object. To illustrate how this works, the following function displays the properties of the object when you pass the object and the object's name as arguments to the function:

function showProps(obj, objName) {
  var result = ``;
  for (var i in obj) {
    // obj.hasOwnProperty() is used to filter out properties from the object's prototype chain
    if (obj.hasOwnProperty(i)) {
      result += `${objName}.${i} = ${obj[i]}\n`;
    }
  }
  return result;
}

So, the function call showProps(myCar, "myCar") would return the following:

myCar.make = Hyundai’
myCar.model = venue
myCar.year = 2010

Creating Objects In JavaScript :
Create JavaScript Object with Object Literal

One of easiest way to create a javascript object is object literal, simply define the property and values inside curly braces as shown below

let bike = {name: 'SuperSport', maker:'Ducati', engine:'937cc'};

Create JavaScript Object with Constructor

Constructor is nothing but a function and with help of new keyword, constructor function allows to create multiple objects of same flavor as shown below

function Vehicle(name, maker) {
   this.name = name;
   this.maker = maker;
}
let car1 = new Vehicle(’Fiesta’, 'Hyundai’’);
let car2 = new Vehicle(’Santa Fe’, 'Hyundai’)
console.log(car1.name);    //Output: Fiesta
console.log(car2.name);    //Output: Santa Fe

Using the JavaScript Keyword new

The following example also creates a new JavaScript object with four properties:

Example

var person = new Object();
person.firstName = “kennedy”;
person.lastName = “Doe”;
person.age = 50;
person.eyeColor = “blue”;
Using the Object.create method

Objects can also be created using the Object.create() method. This method can be very useful, because it allows you to choose the prototype object for the object you want to create, without having to define a constructor function.

// Animal properties and method encapsulation
var Animal = {
  type: 'Invertebrates', // Default value of properties
  displayType: function() {  // Method which will display type of Animal
    console.log(this.type);
  }
};
// Create new animal type called animal1 
var animal1 = Object.create(Animal);
animal1.displayType(); // Output:Invertebrates
// Create new animal type called Fishes
var fish = Object.create(Animal);
fish.type = 'Fishes';
fish.displayType(); // Output:Fishes
